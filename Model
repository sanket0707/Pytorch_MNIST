# step 1 import libraries
import torch 
import torch.nn as nn # linear , convolutional layer etc. 
import torch.optim as optim # SGD optimiser, adam optimizer
import torch.nn.functional as F # activation function 
import torchvision.datasets as datasets
from torch.utils.data import DataLoader # let you makes batches of data etc. 
import torchvision.transforms as transforms


# step 2 - Create fully connected network
class NN(nn.Module): # create a class NN from nn.Module
    def __init__(self, input_size, num_classes): # inherit from nn.Module by initialising it. 
    #print("sanket")
        super(NN,self).__init__() # supper cause the initialisation of parent class
        self.fc1 = nn.Linear(input_size,50)
        self.fc2 = nn.Linear(50, num_classes)
        
    def forward(self,x):
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x
    
model = NN(784,10)
x = torch.randn(64,784)
print(model(x).shape)


# Step 3 - set device to GPU or CPU
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Step 4 Define Hyperparameters
input_size = 784
num_classes = 10
learning_Rate = 0.001
batch_size = 64
num_epochs = 1

# Step 5 Load  data
train_dataset = datasets.MNIST(root='dataset/', train=True, transform = transforms.ToTensor(), download = True)
train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size,shuffle=True)
test_dataset = datasets.MNIST(root='dataset/', train=False, transform = transforms.ToTensor(), download = True)
test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size,shuffle=True)

# Step 6 - Initialise the Network
model = NN(input_size=input_size, num_classes=num_classes).to(device)

# Step 6 - Loss and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(),lr=learning_Rate)


# Step 7 Train the network
for epoch in range(num_epochs):
    for batch_idx, (data,targets) in enumerate(train_loader):
        data = data.to(device=device)
        targets = targets.to(device=device) 
        
        #print(data.shape)
        data = data.reshape(data.shape[0], -1) # convert to 1-d array
        
        #forward 
        scores = model(data)
        loss = criterion(scores, targets)
        
        #backward
        optimizer.zero_grad()
        loss.backward()
        
        # Gradient descent or adam step
        optimizer.step()
        
def check_accuracy(loader,model):
    num_correct = 0
    num_samples = 0
    model.eval()
    
    with torch.no_grad():
        for x,y in loader:
            x = x.to(device=device)
            y = y.to(device=device)
            x=x.reshape(x.shape[0],-1)
            
            scores = model(x)
            _,predictions = scores.max(1)
            num_correct += (predictions==y).sum()
            num_samples += predictions.size(0)
            
        print(f'Got {num_correct}/{num_samples} with accuracy {float(num_correct)/float(num_samples)*100:.2f}')

    model.train()
   

check_accuracy(train_loader, model)
check_accuracy(test_loader, model)
        













































